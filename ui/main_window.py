import os
import re
import threading
import yt_dlp
from PyQt5.QtWidgets import (QMainWindow, QTextEdit, QPushButton, 
                            QVBoxLayout, QHBoxLayout, QWidget, QLabel, 
                            QProgressBar, QMessageBox, QMenuBar, QMenu,
                            QAction, QTabWidget, QApplication)
from PyQt5.QtGui import QDesktopServices, QColor
from PyQt5.QtCore import QUrl, QTimer, QThread, pyqtSignal
from core.downloader import Downloader, DownloadSignals
from ui.settings_dialog import SettingsDialog
from ui.history_widget import HistoryWidget
from ui.queue_widget import QueueWidget
from utils.config import Config
from database.manager import DatabaseManager


class MP3YapMainWindow(QMainWindow):
    """Ana uygulama penceresi"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("YouTube MP3 ƒ∞ndirici")
        self.setGeometry(100, 100, 800, 600)
        
        # G√∂lge efektini kaldƒ±rdƒ±k - tablolarda sorun yaratƒ±yor
        
        # Config ve Database
        self.config = Config()
        self.db_manager = DatabaseManager()
        
        # Instance attributes initialization
        self.url_text: QTextEdit
        self.status_label: QLabel
        self.current_file_label: QLabel
        self.progress_bar: QProgressBar
        self.progress_percent: QLabel
        self.download_button: QPushButton
        self.open_folder_button: QPushButton
        
        # URL kontrol cache
        self.url_cache = {}  # URL -> info dict
        self.last_checked_urls = set()  # Son kontrol edilen URL'ler
        
        # Sinyaller ve downloader
        self.signals = DownloadSignals()
        self.downloader = Downloader(self.signals)
        
        # Kuyruk i√ßin ayrƒ± downloader
        self.queue_signals = DownloadSignals()
        self.queue_downloader = Downloader(self.queue_signals)
        
        # Men√º √ßubuƒüu
        self.setup_menu()
        
        # Aray√ºz kurulumu
        self.setup_ui()
        
        # Sinyal baƒülantƒ±larƒ± (UI kurulumundan sonra)
        self.signals.progress.connect(self.update_progress)
        self.signals.finished.connect(self.download_finished)
        self.signals.error.connect(self.download_error)
        self.signals.status_update.connect(self.update_status)
        
        # Kuyruk sinyalleri
        self.queue_signals.progress.connect(self.queue_download_progress)
        self.queue_signals.finished.connect(self.queue_download_finished)
        self.queue_signals.error.connect(self.queue_download_error)
        self.queue_signals.status_update.connect(self.queue_status_update)
    
    def setup_menu(self):
        """Men√º √ßubuƒüunu olu≈ütur"""
        menubar = self.menuBar()
        
        # Dosya men√ºs√º
        file_menu = menubar.addMenu('Dosya')
        
        # URL'leri i√ße aktar
        import_action = QAction('URL\'leri ƒ∞√ße Aktar...', self)
        import_action.setShortcut('Ctrl+I')
        import_action.triggered.connect(self.import_urls)
        file_menu.addAction(import_action)
        
        file_menu.addSeparator()
        
        # √áƒ±kƒ±≈ü
        exit_action = QAction('√áƒ±kƒ±≈ü', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # Ayarlar men√ºs√º
        settings_menu = menubar.addMenu('Ayarlar')
        
        # Tercihler
        pref_action = QAction('Tercihler...', self)
        pref_action.setShortcut('Ctrl+,')
        pref_action.triggered.connect(self.show_settings)
        settings_menu.addAction(pref_action)
        
        # Yardƒ±m men√ºs√º
        help_menu = menubar.addMenu('Yardƒ±m')
        
        # Hakkƒ±nda
        about_action = QAction('Hakkƒ±nda', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def setup_ui(self):
        """Kullanƒ±cƒ± aray√ºz√ºn√º olu≈ütur"""
        # Ana widget olarak tab widget kullan
        self.tab_widget = QTabWidget()
        
        # ƒ∞ndirme sekmesi
        download_tab = self.create_download_tab()
        self.tab_widget.addTab(download_tab, "ƒ∞ndirme")
        
        # Ge√ßmi≈ü sekmesi
        self.history_widget = HistoryWidget()
        self.history_widget.redownload_signal.connect(self.add_url_to_download)
        self.tab_widget.addTab(self.history_widget, "Ge√ßmi≈ü")
        
        # Tab deƒüi≈üikliƒüini dinle
        self.tab_widget.currentChanged.connect(self.on_tab_changed)
        
        # Kuyruk sekmesi
        self.queue_widget = QueueWidget()
        self.queue_widget.start_download.connect(self.process_queue_item)
        self.tab_widget.addTab(self.queue_widget, "Kuyruk")
        
        # Ana widget olarak tab widget'ƒ± ayarla
        self.setCentralWidget(self.tab_widget)
    
    def create_download_tab(self):
        """ƒ∞ndirme sekmesini olu≈ütur"""
        widget = QWidget()
        layout = QVBoxLayout()
        
        # URL giri≈ü alanƒ±
        url_label = QLabel("ƒ∞ndirilecek YouTube URL'lerini buraya yapƒ±≈ütƒ±rƒ±n:")
        self.url_text = QTextEdit()
        
        # Durum ve ilerleme
        status_layout = QHBoxLayout()
        self.status_label = QLabel("Hazƒ±r")
        self.status_label.setMinimumHeight(30)
        self.status_label.setStyleSheet("""
            QLabel {
                padding: 5px;
                font-size: 14px;
                font-weight: bold;
            }
        """)
        status_layout.addWidget(self.status_label)
        
        # ƒ∞ndirme ilerleme √ßubuƒüu
        progress_layout = QHBoxLayout()
        self.current_file_label = QLabel("Dosya: ")
        self.progress_bar = QProgressBar()
        self.progress_percent = QLabel("0%")
        progress_layout.addWidget(self.current_file_label)
        progress_layout.addWidget(self.progress_bar)
        progress_layout.addWidget(self.progress_percent)
        
        # Butonlar
        button_layout = QHBoxLayout()
        self.download_button = QPushButton("‚ñ∂ ƒ∞ndir")
        self.download_button.clicked.connect(self.start_download)  # type: ignore
        self.download_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #388e3c;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        # ƒ∞ptal butonu
        self.cancel_button = QPushButton("‚èπ ƒ∞ptal")
        self.cancel_button.clicked.connect(self.cancel_download)  # type: ignore
        self.cancel_button.setEnabled(False)
        self.cancel_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #f44336;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover:enabled {
                background-color: #da190b;
            }
            QPushButton:pressed:enabled {
                background-color: #ba000d;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        # Kuyruƒüa ekle butonu
        self.add_to_queue_button = QPushButton("‚ûï Kuyruƒüa Ekle")
        self.add_to_queue_button.clicked.connect(self.add_to_queue)  # type: ignore
        self.add_to_queue_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #2196F3;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:pressed {
                background-color: #0D47A1;
            }
        """)
        
        # Temizle butonu
        self.clear_button = QPushButton("üóë Temizle")
        self.clear_button.clicked.connect(self.clear_urls)  # type: ignore
        self.clear_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #FF9800;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
            QPushButton:pressed {
                background-color: #E65100;
            }
        """)
        
        # Klas√∂r√º a√ß butonu
        self.open_folder_button = QPushButton("üìÅ Klas√∂r√º A√ß")
        self.open_folder_button.clicked.connect(self.open_output_folder)  # type: ignore
        self.open_folder_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #9C27B0;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover:enabled {
                background-color: #7B1FA2;
            }
            QPushButton:pressed:enabled {
                background-color: #6A1B9A;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        # Sol taraf - ana i≈ülemler
        button_layout.addWidget(self.download_button)
        button_layout.addWidget(self.cancel_button)
        button_layout.addWidget(self.add_to_queue_button)
        
        # Bo≈üluk
        button_layout.addStretch()
        
        # Saƒü taraf - yardƒ±mcƒ± i≈ülemler
        button_layout.addWidget(self.clear_button)
        button_layout.addWidget(self.open_folder_button)
        
        # URL durum √ßubuƒüu
        self.url_status_bar = QLabel("")
        self.url_status_bar.setStyleSheet("""
            QLabel {
                padding: 8px;
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 12px;
            }
        """)
        self.url_status_bar.setVisible(False)
        
        # Layout'a widget'larƒ± ekle
        layout.addWidget(url_label)
        layout.addWidget(self.url_text)
        layout.addLayout(status_layout)
        layout.addLayout(progress_layout)
        layout.addLayout(button_layout)
        layout.addWidget(self.url_status_bar)
        
        # URL deƒüi≈üikliklerini dinle
        self.url_check_timer = QTimer()
        self.url_check_timer.setSingleShot(True)
        self.url_check_timer.timeout.connect(self.check_urls_delayed)
        self.url_text.textChanged.connect(self.on_url_text_changed)
        
        widget.setLayout(layout)
        return widget
    
    def start_download(self):
        """ƒ∞ndirme i≈ülemini ba≈ülat"""
        urls = self.url_text.toPlainText().strip().split('\n')
        urls = [url.strip() for url in urls if url.strip()]
        
        if not urls:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen en az bir URL girin!")
            return
        
        # Butonlarƒ± g√ºncelle
        self.download_button.setEnabled(False)
        self.cancel_button.setEnabled(True)
        
        # ƒ∞ndirme thread'ini ba≈ülat
        output_path = self.config.get('output_path', 'music')
        if not os.path.isabs(output_path):
            output_path = os.path.join(os.getcwd(), output_path)
        
        def download_thread():
            self.downloader.download_all(urls, output_path)
            # ƒ∞ndirme bitince butonlarƒ± etkinle≈ütir
            self.download_button.setEnabled(True)
            self.open_folder_button.setEnabled(True)
            # Ayarlara g√∂re klas√∂r√º a√ß
            if self.config.get('auto_open_folder', False):
                self.open_output_folder()
        
        thread = threading.Thread(target=download_thread)
        thread.start()
    
    def open_output_folder(self):
        """ƒ∞ndirilen dosyalarƒ±n bulunduƒüu klas√∂r√º a√ß"""
        output_path = self.config.get('output_path', 'music')
        if not os.path.isabs(output_path):
            output_path = os.path.join(os.getcwd(), output_path)
            
        if os.path.exists(output_path):
            QDesktopServices.openUrl(QUrl.fromLocalFile(output_path))
        else:
            QMessageBox.information(self, "Bilgi", "Hen√ºz hi√ß dosya indirilmemi≈ü!")
    
    def show_settings(self):
        """Ayarlar penceresini g√∂ster"""
        dialog = SettingsDialog(self)
        if dialog.exec_():
            # Ayarlar deƒüi≈ümi≈ü olabilir, gerekli g√ºncellemeleri yap
            pass
    
    def show_about(self):
        """Hakkƒ±nda dialogunu g√∂ster"""
        QMessageBox.about(self, "YouTube MP3 ƒ∞ndirici Hakkƒ±nda",
            "<h3>YouTube MP3 ƒ∞ndirici</h3>"
            "<p>S√ºr√ºm 2.0</p>"
            "<p>YouTube videolarƒ±nƒ± MP3 formatƒ±nda indirmek i√ßin modern ve kullanƒ±cƒ± dostu bir ara√ß.</p>"
            "<p><b>Geli≈ütirici:</b> Mehmet Yerli</p>"
            "<p><b>Web:</b> <a href='https://mehmetyerli.com'>mehmetyerli.com</a></p>"
            "<p><b>Lisans:</b> A√ßƒ±k Kaynak</p>")
    
    def import_urls(self):
        """URL'leri metin dosyasƒ±ndan i√ße aktar"""
        from PyQt5.QtWidgets import QFileDialog
        filename, _ = QFileDialog.getOpenFileName(
            self, 
            "URL Dosyasƒ± Se√ß", 
            "", 
            "Metin Dosyalarƒ± (*.txt);;T√ºm Dosyalar (*.*)"
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    urls = f.read()
                    self.url_text.setPlainText(urls)
                    QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                        f"{len(urls.strip().split())} URL ba≈üarƒ±yla y√ºklendi!")
            except Exception as e:
                QMessageBox.critical(self, "Hata", f"Dosya okunamadƒ±: {str(e)}")
    
    def update_progress(self, filename, percent, text):
        """ƒ∞lerleme √ßubuƒüunu g√ºncelle"""
        # Playlist progress varsa vurgula
        if '[' in text and '/' in text:
            # Playlist progress i√ßeriyor
            self.current_file_label.setText(f"üìã Playlist ƒ∞ndiriliyor - Dosya: {filename}")
            self.progress_percent.setStyleSheet("""
                QLabel {
                    color: #1976D2;
                    font-weight: bold;
                    font-size: 14px;
                }
            """)
        else:
            self.current_file_label.setText(f"Dosya: {filename}")
            self.progress_percent.setStyleSheet("""
                QLabel {
                    font-size: 12px;
                }
            """)
            
        if percent >= 0:
            self.progress_bar.setValue(int(percent))
            self.progress_bar.setRange(0, 100)
        else:
            self.progress_bar.setRange(0, 0)  # Belirsiz ilerleme
        self.progress_percent.setText(text)
    
    def download_finished(self, filename):
        """ƒ∞ndirme tamamlandƒ±ƒüƒ±nda √ßaƒürƒ±lƒ±r"""
        self.status_label.setText(f"ƒ∞ndirme tamamlandƒ±: {filename}")
    
    def download_error(self, filename, error):
        """ƒ∞ndirme hatasƒ± durumunda √ßaƒürƒ±lƒ±r"""
        self.status_label.setText(f"Hata: {filename} - {error}")
    
    def update_status(self, status):
        """Durum mesajƒ±nƒ± g√ºncelle"""
        # √ñnemli uyarƒ±larƒ± silme
        current_text = self.status_label.text()
        if any(x in current_text for x in ["UYARI:", "‚úÖ", "‚ùå"]) and any(x in current_text.lower() for x in ["kuyrukta", "eklendi", "eklenemedi"]):
            # Kuyruk i≈ülemi mesajƒ± varsa √ºzerine yazma
            return
        self.status_label.setText(status)
        
        # Playlist progress'i de status bar'da g√∂ster
        if '[' in status and '/' in status and ']' in status:
            # Playlist progress i√ßeriyor, bunu vurgula
            import re
            match = re.search(r'\[(\d+)/(\d+)\]', status)
            if match:
                current = match.group(1)
                total = match.group(2)
                # Status label'ƒ± renklendir
                self.status_label.setStyleSheet("""
                    QLabel {
                        color: #1976D2;
                        font-weight: bold;
                        padding: 5px;
                        background-color: #E3F2FD;
                        border-radius: 3px;
                    }
                """)
        else:
            # Normal durum i√ßin stil sƒ±fƒ±rla
            self.status_label.setStyleSheet("")
        
        # Eƒüer t√ºm indirmeler tamamlandƒ±ysa butonlarƒ± g√ºncelle
        if status == "üéâ T√ºm indirmeler tamamlandƒ±!" or status == "ƒ∞ndirme durduruldu":
            self.download_button.setEnabled(True)
            self.cancel_button.setEnabled(False)
            # Ge√ßmi≈ü sekmesini g√ºncelle
            if hasattr(self, 'history_widget'):
                self.history_widget.load_history()
            # ƒ∞ndirme tamamlandƒ±ysa URL'leri temizle
            if status == "üéâ T√ºm indirmeler tamamlandƒ±!":
                self.url_text.clear()
                self.url_status_bar.setVisible(False)
    
    def add_url_to_download(self, url):
        """Ge√ßmi≈üten URL'yi indirme listesine ekle"""
        current_text = self.url_text.toPlainText().strip()
        if current_text:
            self.url_text.setPlainText(current_text + '\n' + url)
        else:
            self.url_text.setPlainText(url)
        # ƒ∞ndirme sekmesine ge√ß
        self.tab_widget.setCurrentIndex(0)
        QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "URL indirme listesine eklendi!")
    
    def add_to_queue(self):
        """URL'leri kuyruƒüa ekle"""
        urls = self.url_text.toPlainText().strip().split('\n')
        urls = [url.strip() for url in urls if url.strip()]
        
        if not urls:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen en az bir URL girin!")
            return
        
        # Loading g√∂stergesi
        self.status_label.setText("üîÑ Video bilgileri alƒ±nƒ±yor...")
        self.status_label.setStyleSheet("""
            QLabel {
                background-color: #FFF3E0;
                color: #E65100;
                padding: 5px;
                border-radius: 3px;
                font-weight: bold;
            }
        """)
        self.add_to_queue_button.setEnabled(False)
        self.download_button.setEnabled(False)
        QApplication.processEvents()  # UI g√ºncelleme
        
        # yt-dlp se√ßenekleri
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': 'in_playlist',
            'ignoreerrors': True,
            'skip_download': True,
        }
        
        # URL'leri kuyruƒüa ekle
        added_count = 0
        duplicate_videos = []  # Duplicate video listesi
        
        for url in urls:
            try:
                # Video ba≈ülƒ±ƒüƒ±nƒ± al
                video_title = None
                try:
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        info = ydl.extract_info(url, download=False)
                        if info:
                            if info.get('_type') == 'playlist':
                                # Playlist ise her video i√ßin ayrƒ± kayƒ±t
                                playlist_title = info.get('title', 'ƒ∞simsiz Liste')
                                entries = info.get('entries', [])
                                for idx, entry in enumerate(entries):
                                    video_url = entry.get('url', '')
                                    video_title = entry.get('title', f'Video {idx+1}')
                                    full_title = f"[{playlist_title}] {video_title}"
                                    result = self.db_manager.add_to_queue(video_url, full_title)
                                    if result > 0:  # Ba≈üarƒ±lƒ±
                                        added_count += 1
                                    elif result == -1:  # Duplicate
                                        duplicate_videos.append(video_title)
                            else:
                                # Tek video
                                video_title = info.get('title', 'ƒ∞simsiz Video')
                                result = self.db_manager.add_to_queue(url, video_title)
                                if result > 0:  # Ba≈üarƒ±lƒ±
                                    added_count += 1
                                elif result == -1:  # Duplicate
                                    duplicate_videos.append(video_title)
                except Exception as e:
                    print(f"Video bilgisi alƒ±namadƒ±: {e}")
                    # Hata durumunda URL ile ekle
                    result = self.db_manager.add_to_queue(url, None)
                    if result > 0:
                        added_count += 1
                    elif result == -1:
                        duplicate_videos.append(url)
                    
            except Exception as e:
                print(f"URL eklenirken hata: {e}")
        
        # Butonlarƒ± geri etkinle≈ütir
        self.add_to_queue_button.setEnabled(True)
        self.download_button.setEnabled(True)
        self.status_label.setStyleSheet("")  # Stili sƒ±fƒ±rla
        
        # Sonu√ß mesajƒ± g√∂ster
        total_urls = len(urls)
        duplicate_count = total_urls - added_count
        
        if added_count > 0 and duplicate_count == 0:
            self.status_label.setText(f"‚úì {added_count} video kuyruƒüa eklendi")
            self.status_label.setStyleSheet("""
                QLabel {
                    background-color: #E8F5E9;
                    color: #2E7D32;
                    padding: 5px;
                    border-radius: 3px;
                    font-weight: bold;
                }
            """)
            self.url_text.clear()  # URL'leri temizle
            # Kuyruƒüu yenile
            self.queue_widget.load_queue()
            # Kuyruk sekmesine ge√ß
            self.tab_widget.setCurrentIndex(2)
        elif added_count > 0 and duplicate_count > 0:
            # Hem eklenen hem duplicate olanlarƒ± g√∂ster
            if duplicate_count <= 2 and duplicate_videos:
                # Az sayƒ±da duplicate varsa detay g√∂ster
                dup_names = ", ".join([v[:20] + "..." if len(v) > 20 else v for v in duplicate_videos[:2]])
                self.status_label.setText(f"‚úì {added_count} eklendi | Kuyrukta: {dup_names}")
            else:
                self.status_label.setText(f"‚úì {added_count} yeni eklendi | {duplicate_count} zaten kuyrukta")
            
            self.status_label.setStyleSheet("""
                QLabel {
                    background-color: #FFF3E0;
                    color: #E65100;
                    padding: 5px;
                    border-radius: 3px;
                    font-weight: bold;
                }
            """)
            self.url_text.clear()
            # Kuyruƒüu yenile
            self.queue_widget.load_queue()
            self.tab_widget.setCurrentIndex(2)
        elif added_count == 0 and duplicate_count > 0:
            # Duplicate listesini g√∂ster
            if duplicate_videos and len(duplicate_videos) <= 3:
                # Az sayƒ±da duplicate varsa isimleri g√∂ster
                video_names = ", ".join([v[:30] + "..." if len(v) > 30 else v for v in duplicate_videos[:3]])
                msg = f"Zaten kuyrukta: {video_names}"
            else:
                msg = f"T√ºm videolar ({duplicate_count}) zaten kuyrukta"
            
            # Sadece status_label'da g√∂ster, popup a√ßma
            self.status_label.setText(f"UYARI: {msg}")
            
            self.status_label.setStyleSheet("""
                QLabel {
                    background-color: #FFEBEE;
                    color: #C62828;
                    padding: 5px;
                    border-radius: 3px;
                    font-weight: bold;
                }
            """)
            
            # URL'leri Sƒ∞LME - kullanƒ±cƒ± ana ekranda indirmek isteyebilir
            # Sekme deƒüi≈ütirme YAPMA
            return  # Fonksiyondan √ßƒ±k
        else:
            self.status_label.setText("Hi√ßbir video eklenemedi")
            self.status_label.setStyleSheet("""
                QLabel {
                    background-color: #FFEBEE;
                    color: #C62828;
                    padding: 5px;
                    border-radius: 3px;
                    font-weight: bold;
                }
            """)
    
    def process_queue_item(self, queue_item):
        """Kuyruktan gelen √∂ƒüeyi i≈üle"""
        # ƒ∞ndirme durumunu g√ºncelle
        self.queue_widget.update_download_status(queue_item['id'], 'downloading')
        
        # Downloader'ƒ± hazƒ±rla
        self.current_queue_item = queue_item
        
        # Sinyal baƒülantƒ±larƒ±nƒ± g√ºncelle (kuyruk i√ßin)
        try:
            self.signals.finished.disconnect()
            self.signals.error.disconnect()
        except:
            pass
        
        self.signals.finished.connect(self.queue_download_finished)
        self.signals.error.connect(self.queue_download_error)
        
        # ƒ∞ndirmeyi ba≈ülat
        output_dir = self.config.get('output_directory', 'music')
        download_thread = threading.Thread(
            target=self.queue_downloader.download_all,
            args=([queue_item['url']], output_dir)
        )
        download_thread.start()
    
    def queue_download_progress(self, filename, percent, status):
        """Kuyruk indirme ilerlemesini g√ºncelle"""
        # Kuyruk widget'ƒ±nda ilerleme g√∂sterebiliriz
        pass
    
    def queue_status_update(self, status):
        """Kuyruk durum g√ºncellemesi"""
        if hasattr(self, 'current_queue_item') and self.current_queue_item:
            # D√∂n√º≈üt√ºrme durumunu kontrol et
            if "MP3'e d√∂n√º≈üt√ºr√ºl√ºyor" in status or "D√∂n√º≈üt√ºrme" in status:
                self.queue_widget.update_download_status(
                    self.current_queue_item['id'], 'converting'
                )
    
    def queue_download_finished(self, filename):
        """Kuyruk indirmesi tamamlandƒ±ƒüƒ±nda"""
        if hasattr(self, 'current_queue_item'):
            self.queue_widget.update_download_status(
                self.current_queue_item['id'], 'completed'
            )
            # Ge√ßmi≈üi g√ºncelle
            if hasattr(self, 'history_widget'):
                self.history_widget.load_history()
    
    def queue_download_error(self, filename, error):
        """Kuyruk indirmesinde hata olu≈ütuƒüunda"""
        if hasattr(self, 'current_queue_item'):
            self.queue_widget.update_download_status(
                self.current_queue_item['id'], 'failed', error
            )
    
    def on_tab_changed(self, index):
        """Tab deƒüi≈ütiƒüinde √ßaƒürƒ±lƒ±r"""
        # Ge√ßmi≈ü sekmesi (index 1) se√ßildiyse yenile
        if index == 1 and hasattr(self, 'history_widget'):
            self.history_widget.load_history()
    
    def cancel_download(self):
        """ƒ∞ndirmeyi iptal et"""
        # Downloader'ƒ± durdur
        if hasattr(self, 'downloader'):
            self.downloader.stop()
        
        # Butonlarƒ± g√ºncelle
        self.download_button.setEnabled(True)
        self.cancel_button.setEnabled(False)
        self.status_label.setText("ƒ∞ndirme iptal edildi")
            
    def clear_urls(self):
        """URL metin alanƒ±nƒ± temizle"""
        self.url_text.clear()
        self.status_label.setText("URL listesi temizlendi")
        self.url_status_bar.setVisible(False)
    
    def on_url_text_changed(self):
        """URL metni deƒüi≈ütiƒüinde"""
        # Eƒüer duplicate uyarƒ±sƒ± varsa timer'ƒ± ba≈ülatma
        current_text = self.status_label.text()
        if "kuyrukta" in current_text.lower() and "UYARI:" in current_text:
            return
            
        # Timer'ƒ± durdur ve yeniden ba≈ülat (debounce)
        self.url_check_timer.stop()
        self.url_check_timer.start(500)  # 500ms bekle
    
    def check_urls_delayed(self):
        """Gecikmi≈ü URL kontrol√º"""
        # Kontrol√º direkt √ßalƒ±≈ütƒ±r (QTimer zaten ana thread'de)
        self.check_urls()
    
    def check_urls(self):
        """URL'leri kontrol et ve durum g√∂ster"""
        urls = self.url_text.toPlainText().strip().split('\n')
        urls = [url.strip() for url in urls if url.strip()]
        
        if not urls:
            self.url_status_bar.setVisible(False)
            self.last_checked_urls.clear()
            return
        
        # Eƒüer aynƒ± URL'ler zaten kontrol edildiyse cache'den g√∂ster
        current_urls = set(urls)
        if current_urls == self.last_checked_urls:
            self.show_cached_url_status(urls)
            return
        
        self.last_checked_urls = current_urls
        
        # Hemen loading g√∂ster
        self.url_status_bar.setText("‚è≥ URL'ler kontrol ediliyor...")
        self.url_status_bar.setStyleSheet("""
            QLabel {
                padding: 8px;
                background-color: #fff3e0;
                border: 1px solid #ff9800;
                border-radius: 4px;
                font-size: 12px;
                color: #e65100;
                font-weight: bold;
            }
        """)
        self.url_status_bar.setVisible(True)
        QApplication.processEvents()  # UI g√ºncelle
        
        # Playlist URL'si varsa hemen kontrol ba≈ülat
        has_playlist = any('list=' in url for url in urls)
        if has_playlist:
            self.url_status_bar.setText("‚è≥ Playlist bilgisi alƒ±nƒ±yor...")
            self.url_status_bar.setStyleSheet("""
                QLabel {
                    padding: 8px;
                    background-color: #e3f2fd;
                    border: 1px solid #2196f3;
                    border-radius: 4px;
                    font-size: 12px;
                    color: #1565c0;
                }
            """)
            self.url_status_bar.setVisible(True)
            QApplication.processEvents()  # UI g√ºncelle
        
        # URL sayƒ±sƒ±nƒ± g√∂ster
        valid_urls = []
        invalid_urls = []
        
        # Regex ile hƒ±zlƒ± YouTube URL kontrol√º
        youtube_regex = re.compile(
            r'(https?://)?(www\.)?(youtube\.com/(watch\?v=|shorts/|embed/)|youtu\.be/|m\.youtube\.com/watch\?v=)([a-zA-Z0-9_-]{11})'
        )
        
        for url in urls:
            # √ñnce regex ile hƒ±zlƒ± kontrol
            match = youtube_regex.search(url)
            if match:
                # Video ID'yi al
                video_id = match.group(5)
                if video_id and len(video_id) == 11:
                    valid_urls.append(url)
                else:
                    # Video ID eksik veya hatalƒ±
                    invalid_urls.append(url)
            else:
                # YouTube URL'si deƒüil
                invalid_urls.append(url)
        
        # Liste URL'lerini kontrol et
        playlist_info = []
        
        # yt-dlp'yi dƒ±≈üarƒ±da import et
        import yt_dlp
        
        for url in valid_urls:
            if 'list=' in url:
                # Bu bir playlist URL'si - detaylƒ± bilgi al
                try:
                    ydl_opts = {
                        'quiet': True,
                        'no_warnings': True,
                        'extract_flat': 'in_playlist',  # Playlist metadata'sƒ±nƒ± al
                        'ignoreerrors': True,
                        'skip_download': True,
                    }
                    
                    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                        info = ydl.extract_info(url, download=False)
                        if info and info.get('_type') == 'playlist':
                            # Playlist bilgisi
                            playlist_title = info.get('title', 'ƒ∞simsiz Liste')
                            playlist_size = info.get('playlist_count', 0)
                            if playlist_size == 0 and 'entries' in info:
                                playlist_size = len(info['entries'])
                            uploader = info.get('uploader', info.get('channel', ''))
                            
                            # Cache'e kaydet
                            self.url_cache[url] = {
                                'is_playlist': True,
                                'title': playlist_title,
                                'video_count': playlist_size,
                                'uploader': uploader
                            }
                            
                            playlist_info.append({
                                'url': url,
                                'title': playlist_title,
                                'count': playlist_size,
                                'uploader': uploader
                            })
                        else:
                            # Playlist URL'si gibi g√∂r√ºn√ºyor ama deƒüil
                            playlist_info.append({
                                'url': url,
                                'title': 'Tek Video',
                                'count': 1
                            })
                except Exception as e:
                    # Hata durumunda
                    print(f"Playlist bilgisi alƒ±namadƒ±: {e}")
                    playlist_info.append({
                        'url': url,
                        'title': 'Bilinmeyen',
                        'count': 1
                    })
            else:
                # Tek video
                if url not in self.url_cache:
                    # Cache'e ekle
                    self.url_cache[url] = {
                        'is_playlist': False,
                        'title': 'Tek Video',
                        'video_count': 1
                    }
                
                playlist_info.append({
                    'url': url,
                    'title': None,
                    'count': 1
                })
        
        # Durum mesajƒ±nƒ± olu≈ütur
        status_parts = []
        
        # Ge√ßerli URL sayƒ±sƒ± ve playlist bilgisi
        if valid_urls:
            total_videos = sum(p['count'] for p in playlist_info)
            playlists = [p for p in playlist_info if p.get('count', 1) > 1]
            single_videos = [p for p in playlist_info if p.get('count', 1) == 1]
            
            # Detaylƒ± bilgi
            if total_videos == len(valid_urls):
                # Sadece tek videolar var
                status_parts.append(f"‚úì {len(valid_urls)} video indirmeye hazƒ±r")
            else:
                # Karƒ±≈üƒ±k (playlist + tek video)
                parts = []
                if playlists:
                    parts.append(f"{len(playlists)} playlist")
                if single_videos:
                    parts.append(f"{len(single_videos)} video")
                status_parts.append(f"‚úì {' ve '.join(parts)} (toplam {total_videos} video)")
                
                # Playlist detaylarƒ±
                for p in playlists:
                    if p.get('title') and p['title'] != 'Bilinmeyen':
                        playlist_text = f"  ‚Ä¢ {p['title'][:30]}"
                        if len(p['title']) > 30:
                            playlist_text += "..."
                        playlist_text += f" ({p['count']} video)"
                        status_parts.append(playlist_text)
        
        # Ge√ßersiz URL sayƒ±sƒ±
        invalid_count = len(invalid_urls)
        if invalid_count > 0:
            status_parts.append(f"‚úó {invalid_count} ge√ßersiz URL")
        
        # Veritabanƒ±nda kontrol et
        already_downloaded = 0
        files_exist = 0
        files_missing = 0
        
        for url in valid_urls:
            # Veritabanƒ±nda var mƒ± kontrol et (tam e≈üle≈üme)
            existing = self.db_manager.get_download_by_url(url)
            if existing:
                already_downloaded += 1
                # En son indirilen kaydƒ± kontrol et (birden fazla olabilir)
                latest_record = existing[0]  # En yeni kayƒ±t
                
                # Dosya yolunu kontrol et
                file_found = False
                
                # file_path genellikle klas√∂r yolu, file_name dosya adƒ±
                if latest_record.get('file_path') and latest_record.get('file_name'):
                    # Tam dosya yolunu olu≈ütur
                    full_file_path = os.path.join(latest_record['file_path'], latest_record['file_name'])
                    if os.path.exists(full_file_path):
                        file_found = True
                
                # Alternatif kontroller
                if not file_found and latest_record.get('file_name'):
                    # music klas√∂r√ºnde kontrol et
                    music_path = os.path.join('music', latest_record['file_name'])
                    if os.path.exists(music_path):
                        file_found = True
                    
                    # Absolute music path
                    abs_music_path = os.path.join(os.getcwd(), 'music', latest_record['file_name'])
                    if not file_found and os.path.exists(abs_music_path):
                        file_found = True
                
                if file_found:
                    files_exist += 1
                else:
                    files_missing += 1
        
        if files_exist > 0:
            status_parts.append(f"‚úì {files_exist} dosya hem indirilmi≈ü hem de klas√∂rde mevcut")
        
        if files_missing > 0:
            status_parts.append(f"‚ö† {files_missing} dosya daha √∂nce indirilmi≈ü ama klas√∂rde bulunamadƒ±")
        
        if already_downloaded > files_exist + files_missing:
            # Dosya yolu olmayan kayƒ±tlar var
            unknown = already_downloaded - files_exist - files_missing
            status_parts.append(f"? {unknown} dosya kaydƒ± eksik bilgi i√ßeriyor")
        
        # Durum √ßubuƒüunu g√ºncelle
        if status_parts:
            self.url_status_bar.setText(" | ".join(status_parts))
            self.url_status_bar.setVisible(True)
            
            # Renk ayarla - √∂ncelik sƒ±rasƒ±na g√∂re
            if invalid_count > 0:
                # Kƒ±rmƒ±zƒ± - ge√ßersiz URL var (en kritik)
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #ffebee;
                        border: 1px solid #ef5350;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #c62828;
                        font-weight: bold;
                    }
                """)
            elif files_exist > 0 and files_missing == 0:
                # Mavi - t√ºm dosyalar mevcut (bilgilendirme)
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #e3f2fd;
                        border: 1px solid #2196f3;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #1565c0;
                        font-weight: bold;
                    }
                """)
            elif files_missing > 0:
                # Sarƒ± - dosyalar eksik (yeniden indirilebilir)
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #fff3e0;
                        border: 1px solid #ff9800;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #e65100;
                        font-weight: bold;
                    }
                """)
            else:
                # Ye≈üil - yeni indirmeler i√ßin hazƒ±r
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #e8f5e9;
                        border: 1px solid #4caf50;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #2e7d32;
                        font-weight: bold;
                    }
                """)
        else:
            self.url_status_bar.setVisible(False)
    
    def show_cached_url_status(self, urls):
        """Cache'den URL durumunu g√∂ster"""
        total_videos = 0
        playlists = []
        single_videos = []
        valid_urls = []
        invalid_count = 0
        
        # Regex ile hƒ±zlƒ± YouTube URL kontrol√º
        youtube_regex = re.compile(
            r'(https?://)?(www\.)?(youtube\.com/(watch\?v=|shorts/|embed/)|youtu\.be/|m\.youtube\.com/watch\?v=)([a-zA-Z0-9_-]{11})'
        )
        
        for url in urls:
            if youtube_regex.search(url):
                valid_urls.append(url)
                # Cache'de var mƒ±?
                if url in self.url_cache:
                    info = self.url_cache[url]
                    if info['is_playlist']:
                        playlists.append(info)
                        total_videos += info['video_count']
                    else:
                        single_videos.append(info)
                        total_videos += 1
                else:
                    # Cache'de yok, tek video varsay
                    single_videos.append({'title': 'Tek Video', 'video_count': 1})
                    total_videos += 1
            else:
                invalid_count += 1
        
        # Durum mesajƒ±nƒ± olu≈ütur
        if total_videos == 0 and invalid_count == 0:
            self.url_status_bar.setVisible(False)
            return
            
        status_parts = []
        
        if total_videos > 0:
            if total_videos == len(valid_urls) and not playlists:
                # Sadece tek videolar var
                status_parts.append(f"‚úì {len(valid_urls)} video indirmeye hazƒ±r")
            else:
                # Karƒ±≈üƒ±k (playlist + tek video)
                parts = []
                if playlists:
                    parts.append(f"{len(playlists)} playlist")
                if single_videos:
                    parts.append(f"{len(single_videos)} video")
                status_parts.append(f"‚úì {' ve '.join(parts)} (toplam {total_videos} video) indirmeye hazƒ±r")
        
        if invalid_count > 0:
            status_parts.append(f"‚úó {invalid_count} ge√ßersiz URL")
        
        if status_parts:
            self.url_status_bar.setText(" | ".join(status_parts))
            # Renk ayarla
            if invalid_count > 0:
                # Kƒ±rmƒ±zƒ±
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #ffebee;
                        border: 1px solid #ef5350;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #c62828;
                        font-weight: bold;
                    }
                """)
            else:
                # Ye≈üil
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #e8f5e9;
                        border: 1px solid #4caf50;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #2e7d32;
                        font-weight: bold;
                    }
                """)
            self.url_status_bar.setVisible(True)
        else:
            self.url_status_bar.setVisible(False)
    
    def closeEvent(self, a0):
        """Pencere kapatƒ±lƒ±rken"""
        # Aktif indirme varsa durdur
        if hasattr(self, 'downloader') and self.downloader.is_running:
            self.downloader.stop()
        # Pencereyi kapat
        a0.accept()