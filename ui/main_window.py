import os
import re
import threading
from PyQt5.QtWidgets import (QMainWindow, QTextEdit, QPushButton, 
                            QVBoxLayout, QHBoxLayout, QWidget, QLabel, 
                            QProgressBar, QMessageBox, QMenuBar, QMenu,
                            QAction, QTabWidget, QGraphicsDropShadowEffect)
from PyQt5.QtGui import QDesktopServices, QColor
from PyQt5.QtCore import QUrl
from core.downloader import Downloader, DownloadSignals
from ui.settings_dialog import SettingsDialog
from ui.history_widget import HistoryWidget
from ui.queue_widget import QueueWidget
from utils.config import Config
from database.manager import DatabaseManager


class MP3YapMainWindow(QMainWindow):
    """Ana uygulama penceresi"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("MP3 Yap - YouTube ƒ∞ndirici")
        self.setGeometry(100, 100, 800, 600)
        
        # Pencereye g√∂lge efekti ekle
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(20)
        shadow.setColor(QColor(0, 0, 0, 80))
        shadow.setOffset(0, 0)
        self.setGraphicsEffect(shadow)
        
        # Config ve Database
        self.config = Config()
        self.db_manager = DatabaseManager()
        
        # Instance attributes initialization
        self.url_text: QTextEdit
        self.status_label: QLabel
        self.current_file_label: QLabel
        self.progress_bar: QProgressBar
        self.progress_percent: QLabel
        self.download_button: QPushButton
        self.open_folder_button: QPushButton
        
        # Sinyaller ve downloader
        self.signals = DownloadSignals()
        self.downloader = Downloader(self.signals)
        
        # Men√º √ßubuƒüu
        self.setup_menu()
        
        # Aray√ºz kurulumu
        self.setup_ui()
        
        # Sinyal baƒülantƒ±larƒ± (UI kurulumundan sonra)
        self.signals.progress.connect(self.update_progress)
        self.signals.finished.connect(self.download_finished)
        self.signals.error.connect(self.download_error)
        self.signals.status_update.connect(self.update_status)
    
    def setup_menu(self):
        """Men√º √ßubuƒüunu olu≈ütur"""
        menubar = self.menuBar()
        
        # Dosya men√ºs√º
        file_menu = menubar.addMenu('Dosya')
        
        # URL'leri i√ße aktar
        import_action = QAction('URL\'leri ƒ∞√ße Aktar...', self)
        import_action.setShortcut('Ctrl+I')
        import_action.triggered.connect(self.import_urls)
        file_menu.addAction(import_action)
        
        file_menu.addSeparator()
        
        # √áƒ±kƒ±≈ü
        exit_action = QAction('√áƒ±kƒ±≈ü', self)
        exit_action.setShortcut('Ctrl+Q')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # Ayarlar men√ºs√º
        settings_menu = menubar.addMenu('Ayarlar')
        
        # Tercihler
        pref_action = QAction('Tercihler...', self)
        pref_action.setShortcut('Ctrl+,')
        pref_action.triggered.connect(self.show_settings)
        settings_menu.addAction(pref_action)
        
        # Yardƒ±m men√ºs√º
        help_menu = menubar.addMenu('Yardƒ±m')
        
        # Hakkƒ±nda
        about_action = QAction('Hakkƒ±nda', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def setup_ui(self):
        """Kullanƒ±cƒ± aray√ºz√ºn√º olu≈ütur"""
        # Ana widget olarak tab widget kullan
        self.tab_widget = QTabWidget()
        
        # ƒ∞ndirme sekmesi
        download_tab = self.create_download_tab()
        self.tab_widget.addTab(download_tab, "ƒ∞ndirme")
        
        # Ge√ßmi≈ü sekmesi
        self.history_widget = HistoryWidget()
        self.history_widget.redownload_signal.connect(self.add_url_to_download)
        self.tab_widget.addTab(self.history_widget, "Ge√ßmi≈ü")
        
        # Kuyruk sekmesi
        self.queue_widget = QueueWidget()
        self.queue_widget.start_download.connect(self.process_queue_item)
        self.tab_widget.addTab(self.queue_widget, "Kuyruk")
        
        # Ana widget olarak tab widget'ƒ± ayarla
        self.setCentralWidget(self.tab_widget)
    
    def create_download_tab(self):
        """ƒ∞ndirme sekmesini olu≈ütur"""
        widget = QWidget()
        layout = QVBoxLayout()
        
        # URL giri≈ü alanƒ±
        url_label = QLabel("ƒ∞ndirilecek YouTube URL'lerini buraya yapƒ±≈ütƒ±rƒ±n:")
        self.url_text = QTextEdit()
        
        # Durum ve ilerleme
        status_layout = QHBoxLayout()
        self.status_label = QLabel("Hazƒ±r")
        status_layout.addWidget(self.status_label)
        
        # ƒ∞ndirme ilerleme √ßubuƒüu
        progress_layout = QHBoxLayout()
        self.current_file_label = QLabel("Dosya: ")
        self.progress_bar = QProgressBar()
        self.progress_percent = QLabel("0%")
        progress_layout.addWidget(self.current_file_label)
        progress_layout.addWidget(self.progress_bar)
        progress_layout.addWidget(self.progress_percent)
        
        # Butonlar
        button_layout = QHBoxLayout()
        self.download_button = QPushButton("‚ñ∂ ƒ∞ndir")
        self.download_button.clicked.connect(self.start_download)  # type: ignore
        self.download_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #4CAF50;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #388e3c;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        # ƒ∞ptal butonu
        self.cancel_button = QPushButton("‚èπ ƒ∞ptal")
        self.cancel_button.clicked.connect(self.cancel_download)  # type: ignore
        self.cancel_button.setEnabled(False)
        self.cancel_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #f44336;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover:enabled {
                background-color: #da190b;
            }
            QPushButton:pressed:enabled {
                background-color: #ba000d;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        # Kuyruƒüa ekle butonu
        self.add_to_queue_button = QPushButton("‚ûï Kuyruƒüa Ekle")
        self.add_to_queue_button.clicked.connect(self.add_to_queue)  # type: ignore
        self.add_to_queue_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #2196F3;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:pressed {
                background-color: #0D47A1;
            }
        """)
        
        # Temizle butonu
        self.clear_button = QPushButton("üóë Temizle")
        self.clear_button.clicked.connect(self.clear_urls)  # type: ignore
        self.clear_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #FF9800;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
            QPushButton:pressed {
                background-color: #E65100;
            }
        """)
        
        # Klas√∂r√º a√ß butonu
        self.open_folder_button = QPushButton("üìÅ Klas√∂r√º A√ß")
        self.open_folder_button.clicked.connect(self.open_output_folder)  # type: ignore
        self.open_folder_button.setStyleSheet("""
            QPushButton {
                padding: 5px 20px;
                background-color: #9C27B0;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover:enabled {
                background-color: #7B1FA2;
            }
            QPushButton:pressed:enabled {
                background-color: #6A1B9A;
            }
            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }
        """)
        
        # Sol taraf - ana i≈ülemler
        button_layout.addWidget(self.download_button)
        button_layout.addWidget(self.cancel_button)
        button_layout.addWidget(self.add_to_queue_button)
        
        # Bo≈üluk
        button_layout.addStretch()
        
        # Saƒü taraf - yardƒ±mcƒ± i≈ülemler
        button_layout.addWidget(self.clear_button)
        button_layout.addWidget(self.open_folder_button)
        
        # URL durum √ßubuƒüu
        self.url_status_bar = QLabel("")
        self.url_status_bar.setStyleSheet("""
            QLabel {
                padding: 8px;
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 12px;
            }
        """)
        self.url_status_bar.setVisible(False)
        
        # Layout'a widget'larƒ± ekle
        layout.addWidget(url_label)
        layout.addWidget(self.url_text)
        layout.addLayout(status_layout)
        layout.addLayout(progress_layout)
        layout.addLayout(button_layout)
        layout.addWidget(self.url_status_bar)
        
        # URL deƒüi≈üikliklerini dinle
        self.url_text.textChanged.connect(self.check_urls)
        
        widget.setLayout(layout)
        return widget
    
    def start_download(self):
        """ƒ∞ndirme i≈ülemini ba≈ülat"""
        urls = self.url_text.toPlainText().strip().split('\n')
        urls = [url.strip() for url in urls if url.strip()]
        
        if not urls:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen en az bir URL girin!")
            return
        
        # Butonlarƒ± g√ºncelle
        self.download_button.setEnabled(False)
        self.cancel_button.setEnabled(True)
        
        # ƒ∞ndirme thread'ini ba≈ülat
        output_path = self.config.get('output_path', 'music')
        if not os.path.isabs(output_path):
            output_path = os.path.join(os.getcwd(), output_path)
        
        def download_thread():
            self.downloader.download_all(urls, output_path)
            # ƒ∞ndirme bitince butonlarƒ± etkinle≈ütir
            self.download_button.setEnabled(True)
            self.open_folder_button.setEnabled(True)
            # Ayarlara g√∂re klas√∂r√º a√ß
            if self.config.get('auto_open_folder', False):
                self.open_output_folder()
        
        thread = threading.Thread(target=download_thread)
        thread.start()
    
    def open_output_folder(self):
        """ƒ∞ndirilen dosyalarƒ±n bulunduƒüu klas√∂r√º a√ß"""
        output_path = self.config.get('output_path', 'music')
        if not os.path.isabs(output_path):
            output_path = os.path.join(os.getcwd(), output_path)
            
        if os.path.exists(output_path):
            QDesktopServices.openUrl(QUrl.fromLocalFile(output_path))
        else:
            QMessageBox.information(self, "Bilgi", "Hen√ºz hi√ß dosya indirilmemi≈ü!")
    
    def show_settings(self):
        """Ayarlar penceresini g√∂ster"""
        dialog = SettingsDialog(self)
        if dialog.exec_():
            # Ayarlar deƒüi≈ümi≈ü olabilir, gerekli g√ºncellemeleri yap
            pass
    
    def show_about(self):
        """Hakkƒ±nda dialogunu g√∂ster"""
        QMessageBox.about(self, "MP3 Yap Hakkƒ±nda",
            "<h3>MP3 Yap - YouTube ƒ∞ndirici</h3>"
            "<p>S√ºr√ºm 2.0</p>"
            "<p>YouTube videolarƒ±nƒ± MP3 formatƒ±nda indirmek i√ßin modern ve kullanƒ±cƒ± dostu bir ara√ß.</p>"
            "<p><b>Geli≈ütirici:</b> Mehmet Yerli</p>"
            "<p><b>Web:</b> <a href='https://mehmetyerli.com'>mehmetyerli.com</a></p>"
            "<p><b>Lisans:</b> A√ßƒ±k Kaynak</p>")
    
    def import_urls(self):
        """URL'leri metin dosyasƒ±ndan i√ße aktar"""
        from PyQt5.QtWidgets import QFileDialog
        filename, _ = QFileDialog.getOpenFileName(
            self, 
            "URL Dosyasƒ± Se√ß", 
            "", 
            "Metin Dosyalarƒ± (*.txt);;T√ºm Dosyalar (*.*)"
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    urls = f.read()
                    self.url_text.setPlainText(urls)
                    QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                        f"{len(urls.strip().split())} URL ba≈üarƒ±yla y√ºklendi!")
            except Exception as e:
                QMessageBox.critical(self, "Hata", f"Dosya okunamadƒ±: {str(e)}")
    
    def update_progress(self, filename, percent, text):
        """ƒ∞lerleme √ßubuƒüunu g√ºncelle"""
        self.current_file_label.setText(f"Dosya: {filename}")
        if percent >= 0:
            self.progress_bar.setValue(int(percent))
        self.progress_percent.setText(text)
    
    def download_finished(self, filename):
        """ƒ∞ndirme tamamlandƒ±ƒüƒ±nda √ßaƒürƒ±lƒ±r"""
        self.status_label.setText(f"ƒ∞ndirme tamamlandƒ±: {filename}")
    
    def download_error(self, filename, error):
        """ƒ∞ndirme hatasƒ± durumunda √ßaƒürƒ±lƒ±r"""
        self.status_label.setText(f"Hata: {filename} - {error}")
    
    def update_status(self, status):
        """Durum mesajƒ±nƒ± g√ºncelle"""
        self.status_label.setText(status)
        # Eƒüer t√ºm indirmeler tamamlandƒ±ysa butonlarƒ± g√ºncelle
        if status == "üéâ T√ºm indirmeler tamamlandƒ±!" or status == "ƒ∞ndirme durduruldu":
            self.download_button.setEnabled(True)
            self.cancel_button.setEnabled(False)
            # Ge√ßmi≈ü sekmesini g√ºncelle
            if hasattr(self, 'history_widget'):
                self.history_widget.load_history()
    
    def add_url_to_download(self, url):
        """Ge√ßmi≈üten URL'yi indirme listesine ekle"""
        current_text = self.url_text.toPlainText().strip()
        if current_text:
            self.url_text.setPlainText(current_text + '\n' + url)
        else:
            self.url_text.setPlainText(url)
        # ƒ∞ndirme sekmesine ge√ß
        self.tab_widget.setCurrentIndex(0)
        QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "URL indirme listesine eklendi!")
    
    def add_to_queue(self):
        """URL'leri kuyruƒüa ekle"""
        urls = self.url_text.toPlainText().strip().split('\n')
        urls = [url.strip() for url in urls if url.strip()]
        
        if not urls:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen en az bir URL girin!")
            return
        
        # URL'leri kuyruƒüa ekle
        added_count = 0
        for url in urls:
            try:
                self.queue_widget.add_to_queue(url)
                added_count += 1
            except Exception as e:
                print(f"URL eklenirken hata: {e}")
        
        if added_count > 0:
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", 
                                  f"{added_count} URL kuyruƒüa eklendi!")
            self.url_text.clear()
            # Kuyruk sekmesine ge√ß
            self.tab_widget.setCurrentIndex(2)
    
    def process_queue_item(self, queue_item):
        """Kuyruktan gelen √∂ƒüeyi i≈üle"""
        # ƒ∞ndirme durumunu g√ºncelle
        self.queue_widget.update_download_status(queue_item['id'], 'downloading')
        
        # Downloader'ƒ± hazƒ±rla
        self.current_queue_item = queue_item
        
        # Sinyal baƒülantƒ±larƒ±nƒ± g√ºncelle (kuyruk i√ßin)
        try:
            self.signals.finished.disconnect()
            self.signals.error.disconnect()
        except:
            pass
        
        self.signals.finished.connect(self.queue_download_finished)
        self.signals.error.connect(self.queue_download_error)
        
        # ƒ∞ndirmeyi ba≈ülat
        output_dir = self.config.get('output_directory', 'music')
        download_thread = threading.Thread(
            target=self.downloader.download_all,
            args=([queue_item['url']], output_dir)
        )
        download_thread.start()
    
    def queue_download_finished(self, filename):
        """Kuyruk indirmesi tamamlandƒ±ƒüƒ±nda"""
        if hasattr(self, 'current_queue_item'):
            self.queue_widget.update_download_status(
                self.current_queue_item['id'], 'completed'
            )
            # Ge√ßmi≈üi g√ºncelle
            if hasattr(self, 'history_widget'):
                self.history_widget.load_history()
    
    def queue_download_error(self, filename, error):
        """Kuyruk indirmesinde hata olu≈ütuƒüunda"""
        if hasattr(self, 'current_queue_item'):
            self.queue_widget.update_download_status(
                self.current_queue_item['id'], 'failed', error
            )
    
    def cancel_download(self):
        """ƒ∞ndirmeyi iptal et"""
        # Downloader'ƒ± durdur
        if hasattr(self, 'downloader'):
            self.downloader.stop()
        
        # Butonlarƒ± g√ºncelle
        self.download_button.setEnabled(True)
        self.cancel_button.setEnabled(False)
        self.status_label.setText("ƒ∞ndirme iptal edildi")
            
    def clear_urls(self):
        """URL metin alanƒ±nƒ± temizle"""
        self.url_text.clear()
        self.status_label.setText("URL listesi temizlendi")
        self.url_status_bar.setVisible(False)
    
    def check_urls(self):
        """URL'leri kontrol et ve durum g√∂ster"""
        urls = self.url_text.toPlainText().strip().split('\n')
        urls = [url.strip() for url in urls if url.strip()]
        
        if not urls:
            self.url_status_bar.setVisible(False)
            return
        
        # URL sayƒ±sƒ±nƒ± g√∂ster
        valid_urls = []
        youtube_pattern = r'(https?://)?(www\.)?(youtube\.com/(watch\?v=|embed/|v/)|youtu\.be/)[\w-]+'
        
        for url in urls:
            if re.match(youtube_pattern, url):
                valid_urls.append(url)
        
        # Durum mesajƒ±nƒ± olu≈ütur
        status_parts = []
        
        # Ge√ßerli URL sayƒ±sƒ±
        if valid_urls:
            status_parts.append(f"‚úì {len(valid_urls)} ge√ßerli URL")
        
        # Ge√ßersiz URL sayƒ±sƒ±
        invalid_count = len(urls) - len(valid_urls)
        if invalid_count > 0:
            status_parts.append(f"‚úó {invalid_count} ge√ßersiz URL")
        
        # Veritabanƒ±nda kontrol et
        already_downloaded = 0
        files_exist = 0
        files_missing = 0
        
        for url in valid_urls:
            # Veritabanƒ±nda var mƒ± kontrol et
            existing = self.db_manager.search_downloads(url)
            if existing:
                already_downloaded += 1
                # En son indirilen kaydƒ± kontrol et (birden fazla olabilir)
                latest_record = existing[0]  # En yeni kayƒ±t
                
                # Dosya yolunu kontrol et
                file_found = False
                
                # file_path genellikle klas√∂r yolu, file_name dosya adƒ±
                if latest_record.get('file_path') and latest_record.get('file_name'):
                    # Tam dosya yolunu olu≈ütur
                    full_file_path = os.path.join(latest_record['file_path'], latest_record['file_name'])
                    if os.path.exists(full_file_path):
                        file_found = True
                
                # Alternatif kontroller
                if not file_found and latest_record.get('file_name'):
                    # music klas√∂r√ºnde kontrol et
                    music_path = os.path.join('music', latest_record['file_name'])
                    if os.path.exists(music_path):
                        file_found = True
                    
                    # Absolute music path
                    abs_music_path = os.path.join(os.getcwd(), 'music', latest_record['file_name'])
                    if not file_found and os.path.exists(abs_music_path):
                        file_found = True
                
                if file_found:
                    files_exist += 1
                else:
                    files_missing += 1
        
        if files_exist > 0:
            status_parts.append(f"‚úì {files_exist} dosya mevcut")
        
        if files_missing > 0:
            status_parts.append(f"‚ö† {files_missing} dosya eksik")
        
        if already_downloaded > files_exist + files_missing:
            # Dosya yolu olmayan kayƒ±tlar var
            unknown = already_downloaded - files_exist - files_missing
            status_parts.append(f"? {unknown} dosya yolu bilinmiyor")
        
        # Durum √ßubuƒüunu g√ºncelle
        if status_parts:
            self.url_status_bar.setText(" | ".join(status_parts))
            self.url_status_bar.setVisible(True)
            
            # Renk ayarla
            if files_exist > 0:
                # Kƒ±rmƒ±zƒ± - dosyalar zaten mevcut
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #ffebee;
                        border: 1px solid #ef5350;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #c62828;
                    }
                """)
            elif files_missing > 0:
                # Sarƒ± - daha √∂nce indirilmi≈ü ama dosya yok
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #fff3e0;
                        border: 1px solid #ff9800;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #e65100;
                    }
                """)
            elif invalid_count > 0:
                # Gri - ge√ßersiz URL var
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #f5f5f5;
                        border: 1px solid #9e9e9e;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #616161;
                    }
                """)
            else:
                # Ye≈üil - her ≈üey tamam
                self.url_status_bar.setStyleSheet("""
                    QLabel {
                        padding: 8px;
                        background-color: #e8f5e9;
                        border: 1px solid #4caf50;
                        border-radius: 4px;
                        font-size: 12px;
                        color: #2e7d32;
                    }
                """)
        else:
            self.url_status_bar.setVisible(False)
    
    def closeEvent(self, a0):
        """Pencere kapatƒ±lƒ±rken"""
        # Aktif indirme varsa durdur
        if hasattr(self, 'downloader') and self.downloader.is_running:
            self.downloader.stop()
        # Pencereyi kapat
        a0.accept()